load("@fbcode_macros//build_defs:platform_utils.bzl", "platform_utils")
load("@fbcode_macros//build_defs:python_binary.bzl", "python_binary")
load("@fbcode_macros//build_defs:python_library.bzl", "python_library")
load("@fbcode_macros//build_defs:python_unittest.bzl", "python_unittest")
load("@fbcode_macros//build_defs/lib:third_party.bzl", "third_party")

python_library(
    name = "pluggable",
    srcs = ["pluggable.py"],
    base_module = "rpm",
)

python_library(
    name = "common",
    srcs = ["common.py"],
    base_module = "rpm",
    deps = ["//fs_image:common"],
)

# NB: For anything that runs at Facebook, add `facebook:db_connection` to
# your `deps`, but import this regular `rpm.db_connection` module.
python_library(
    name = "db_connection",
    srcs = ["db_connection.py"],
    base_module = "rpm",
    deps = [":pluggable"],
)

python_library(
    name = "repo_objects",
    srcs = ["repo_objects.py"],
    base_module = "rpm",
    deps = [":common"],
)

python_library(
    name = "temp_repos",
    srcs = ["tests/temp_repos.py"],
    base_module = "rpm",
    resources = {
        third_party.replace_third_party_repo(
            "third-party//busybox:bin/busybox",
            platform_utils.get_platform_for_current_buildfile(),
        ): "tests/third_party/busybox",
        # NB: It would be great to also use `rpmbuild` from the third-party
        # repo, but doing this is fairly intractable, see D15511231.
    },
)

python_unittest(
    name = "test-repo-objects",
    srcs = ["tests/test_repo_objects.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_objects"),
    ],
    par_style = "zip",  # fastzip would break the data include
    deps = [
        ":repo_objects",
        ":temp_repos",
    ],
)

python_library(
    name = "repo_sizer",
    srcs = ["repo_sizer.py"],
    base_module = "rpm",
    deps = [":repo_objects"],
)

python_unittest(
    name = "test-repo-sizer",
    srcs = ["tests/test_repo_sizer.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_sizer"),
    ],
    deps = [":repo_sizer"],
)

python_library(
    name = "parse_repodata",
    srcs = ["parse_repodata.py"],
    base_module = "rpm",
    deps = [":repo_objects"],
)

python_unittest(
    name = "test-parse-repodata",
    srcs = ["tests/test_parse_repodata.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":parse_repodata"),
    ],
    deps = [
        ":parse_repodata",
        ":temp_repos",
    ],
)

python_library(
    name = "repo_snapshot",
    srcs = ["repo_snapshot.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":repo_objects",
    ],
)

python_unittest(
    name = "test-repo-snapshot",
    srcs = ["tests/test_repo_snapshot.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_snapshot"),
    ],
    deps = [":repo_snapshot"],
)

python_library(
    name = "repo_db",
    srcs = ["repo_db.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":repo_objects",
    ],
)

python_unittest(
    name = "test-repo-db",
    srcs = ["tests/test_repo_db.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_db"),
    ],
    deps = [
        ":db_connection",
        ":repo_db",
    ],
)

python_library(
    name = "repo_server",
    srcs = ["repo_server.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":repo_objects",
        ":repo_snapshot",
        "//fs_image/rpm/storage/facebook:storage",
    ],
)

python_unittest(
    name = "test-repo-server",
    srcs = ["tests/test_repo_server.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_server"),
    ],
    deps = [
        ":repo_server",
        ":temp_repos",
    ],
    external_deps = ["python-requests"],
)

python_binary(
    name = "repo-server",
    main_module = "rpm.repo_server",
    deps = [":repo_server"],
)

python_library(
    name = "yum_conf",
    srcs = ["yum_conf.py"],
    base_module = "rpm",
)

python_unittest(
    name = "test-yum-conf",
    srcs = ["tests/test_yum_conf.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":yum_conf"),
    ],
    deps = [":yum_conf"],
)

# This is split out so that our coverage tool doesn't complain that the
# `repo-server` binary has 0% coverage. T24586337
python_library(
    name = "repo_server_binary",
    base_module = "rpm",
    gen_srcs = {":repo-server": "repo-server"},
)

python_binary(
    name = "yum-from-snapshot",
    srcs = ["yum_from_snapshot.py"],
    base_module = "rpm",
    main_module = "rpm.yum_from_snapshot",
    par_style = "xar",  # Lets us embed the `repo-server` binary
    deps = [
        ":common",
        ":repo_server_binary",
        ":yum_conf",
    ],
)

python_binary(
    name = "yum-from-test-snapshot",
    srcs = ["tests/yum_from_test_snapshot.py"],
    base_module = "rpm",
    main_module = "rpm.tests.yum_from_test_snapshot",
    par_style = "xar",  # Lets us embed `tests/snapshot`
    # This is temporary -- once `snapshot-repos` lands, we should
    # dynamically generate the snapshot, and test against that, rather than
    # testing against this hardcoded thing.
    resources = glob(["tests/snapshot/**"]),
    deps = [":yum-from-snapshot-library"],
)

python_unittest(
    name = "test-yum-from-snapshot",
    srcs = ["tests/test_yum_from_snapshot.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":yum-from-snapshot-library"),
        (100, ":yum-from-test-snapshot-library"),
    ],
    par_style = "xar",  # Lets us embed `tests/snapshot`
    deps = [
        ":yum-from-snapshot-library",
        ":yum-from-test-snapshot-library",
    ],
)
