# NB: There is no binary here because the image compiler does not get built
# by Buck, it is executed in-place using the system Python.

load(":defs.bzl", "READ_MY_DOC_image_feature_target", "TEST_TARGET_PREFIX", "image_feature_python_unittest")

python_library(
    name = "subvolume_on_disk",
    srcs = ["subvolume_on_disk.py"],
    base_module = "compiler",
)

python_binary(
    name = "subvolume-on-disk",
    main_module = "compiler.subvolume_on_disk",
    deps = [":subvolume_on_disk"],
)

python_unittest(
    name = "test-subvolume-on-disk",
    srcs = ["tests/test_subvolume_on_disk.py"],
    base_module = "compiler",
    needed_coverage = [(
        100,
        ":subvolume_on_disk",
    )],
    deps = [":subvolume_on_disk"],
)

python_library(
    name = "enriched_namedtuple",
    srcs = ["enriched_namedtuple.py"],
    base_module = "compiler",
)

python_unittest(
    name = "test-enriched-namedtuple",
    srcs = ["tests/test_enriched_namedtuple.py"],
    base_module = "compiler",
    needed_coverage = [(
        100,
        ":enriched_namedtuple",
    )],
    deps = [":enriched_namedtuple"],
)

python_library(
    name = "requires_provides",
    srcs = [
        "path_object.py",
        "provides.py",
        "requires.py",
    ],
    base_module = "compiler",
    deps = [":enriched_namedtuple"],
)

python_unittest(
    name = "test-requires-provides",
    srcs = ["tests/test_requires_provides.py"],
    base_module = "compiler",
    needed_coverage = [(
        100,
        ":requires_provides",
    )],
    deps = [":requires_provides"],
)

python_library(
    name = "mock_subvolume_from_json_file",
    srcs = ["tests/mock_subvolume_from_json_file.py"],
    base_module = "compiler",
    deps = [":subvolume_on_disk"],
)

python_library(
    name = "items",
    srcs = ["items.py"],
    base_module = "compiler",
    deps = [
        ":requires_provides",
        ":subvolume_on_disk",
        "//fs_image:subvol_utils",
    ],
)

python_unittest(
    name = "test-items",
    srcs = ["tests/test_items.py"],
    base_module = "compiler",
    needed_coverage = [(
        100,
        ":items",
    )],
    par_style = "xar",  # "fastzip" would break :volume_for_repo in @mode/opt
    resources = {
        "//fs_image/rpm:yum-from-test-snapshot": "tests/yum-from-test-snapshot",
    },
    deps = [
        ":items",
        ":mock_subvolume_from_json_file",
        "//fs_image:testlib_temp_subvolumes",
        "//fs_image/btrfs_diff:testlib_render_subvols",
    ],
)

python_library(
    name = "dep_graph",
    srcs = ["dep_graph.py"],
    base_module = "compiler",
    deps = [":items"],
)

python_unittest(
    name = "test-dep-graph",
    srcs = ["tests/test_dep_graph.py"],
    base_module = "compiler",
    needed_coverage = [(
        100,
        ":dep_graph",
    )],
    deps = [":dep_graph"],
)

python_library(
    name = "items_for_features",
    srcs = ["items_for_features.py"],
    base_module = "compiler",
    deps = [":items"],
)

python_library(
    name = "sample_items",
    srcs = ["tests/sample_items.py"],
    base_module = "compiler",
    deps = [":items"],
)

# Transitive deps of `tests:feature_dirs_and_copy_tar` --

TEST_IMAGE_FEATURE_TRANSITIVE_DEPS = [
    READ_MY_DOC_image_feature_target("feature_dirs"),
    READ_MY_DOC_image_feature_target("feature_bad_dir"),
    READ_MY_DOC_image_feature_target("feature_tar_and_rpms"),
    READ_MY_DOC_image_feature_target("feature_copy_dirs_tar_and_rpms"),
    "hello_world.tar",
]

image_feature_python_unittest(
    name = "test-image-feature",
    srcs = ["tests/test_image_feature.py"],
    # I cannot get coverage for `image_feature.py` here, because that is
    # executed by the Buck Python runtime.  I could conceivably shim all
    # that out, but it seems entirely not worth the trouble.
    needed_coverage = [(
        100,
        ":items_for_features",
    )],
    test_image_feature_transitive_deps = TEST_IMAGE_FEATURE_TRANSITIVE_DEPS,
    deps = [
        ":dep_graph",
        ":items_for_features",
    ],
)

python_library(
    name = "compiler",
    srcs = ["compiler.py"],
    base_module = "compiler",
    deps = [
        ":dep_graph",
        ":items_for_features",
        ":subvolume_on_disk",
    ],
)

image_feature_python_unittest(
    name = "test-compiler",
    srcs = ["tests/test_compiler.py"],
    needed_coverage = [(
        100,
        ":compiler",
    )],
    resources = {
        "//fs_image/rpm:yum-from-test-snapshot": "tests/yum-from-test-snapshot",
    },
    test_image_feature_transitive_deps = TEST_IMAGE_FEATURE_TRANSITIVE_DEPS,
    deps = [
        ":compiler",
        ":mock_subvolume_from_json_file",
    ],
)

IMAGE_LAYER_DEPS = [
    "child_layer",
    "parent_layer",
    "hello_world_base",
    "create_ops",
]

python_unittest(
    name = "test-image-layer",
    srcs = ["tests/test_image_layer.py"],
    base_module = "compiler",
    # Python `deps` don't work as you'd expect in fbcode -- they have to be
    # other `python_*` rules.  `cpp_deps` is the kitchen sink?
    cpp_deps = [
        # Buck bug: `env` does not create a dependency; do it explicitly.
        TEST_TARGET_PREFIX + t
        for t in IMAGE_LAYER_DEPS
    ],
    # NB: We could replace this with `resources` if this breaks, but while
    # the `env` thing works, the effort isn't worth the reward.  One upside
    # of ditching `env` is that the test will start working stand-alone
    # (running `test-image-layer#binary.par`) without needing `buck test`.
    env = {
        "test_image_layer_path_to_" + t: "$(location {})".format(
            TEST_TARGET_PREFIX + t,
        )
        for t in IMAGE_LAYER_DEPS
    },
    par_style = "zip",  # "fastzip" would break :volume_for_repo in @mode/opt
    # As with `test-image-feature`, we cannot get `image_layer.py` coverage.
    deps = [
        ":subvolume_on_disk",
        "//fs_image:artifacts_dir",
        "//fs_image:volume_for_repo",
        "//fs_image/btrfs_diff:testlib_demo_sendstreams",
        "//fs_image/btrfs_diff:testlib_render_subvols",
    ],
)
