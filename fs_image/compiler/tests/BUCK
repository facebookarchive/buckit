##
## image_feature: The goal of this section is to get good coverage for all
## the syntax variants supported by the `image_feature` converter.  The unit
## test will then check that they become the right image compiler Items.
##

load("@fbcode_macros//build_defs:native_rules.bzl", "buck_genrule", "buck_sh_binary")
load("@fbcode_macros//build_defs:python_binary.bzl", "python_binary")
load("//fs_image/buck:image.bzl", "image")
load("//fs_image/buck:wrap_runtime_deps.bzl", "maybe_wrap_runtime_deps_as_build_time_deps")

# The rule `hello_world.tar` must be deterministic to be used in images.
hello_tar_hash = (
    "sha256:" +
    "dd83365abc69fe39990096a9396d9d2d6fbf75f849ab1640a10fdf9614d8d03d"
)

buck_sh_binary(
    name = "hello_world_tar_generator.sh",
    main = "hello_world_tar_generator.sh",
)

buck_genrule(
    name = "hello_world.tar",
    out = "hello_world.tar",
    bash = '$(exe :hello_world_tar_generator.sh) "\$(basename $OUT)" ' +
           "\$(dirname $OUT)",
)

# The next set of layers are used to test our nspawn runtime.
#
# They start by making a read-only clone of part of the host filesystem.
# This is kind of like `systemd-nspawn --volatile`.  A more heremtic
# solution would be to commit e.g.  a pre-determined Alpine Linux mini image
# into `fs_image`, but for our simple tests, this is fine.

image.layer(
    name = "only-for-tests-read-only-host-clone-base",
    make_dirs = [
        ("/", "mnt"),
        ("/", "var"),
    ],
    mounts = [image.host_dir_mount(source) for source in [
        "/bin",
        "/lib",
        "/sbin",
        "/usr",
        # Future: move these 2 (and the `make_dirs`) into an FB-only feature.
        "/mnt/gvfs",
        "/var/facebook",
    ]],
)

image.layer(
    name = "only-for-tests-read-only-host-clone",
    parent_layer = ":only-for-tests-read-only-host-clone-base",
    # `test_non_ephemeral_snapshot` needs a place to write as `nobody`.
    make_dirs = [{
        "into_dir": "/",
        "mode": "u+rwx,og+rx",
        "path_to_make": "home/nobody",
        "user:group": "nobody:nobody",
    }],
    mounts = [image.host_dir_mount("/etc")],
)

image.layer(
    name = "only-for-tests-read-only-host-clone-no-machine-id",
    parent_layer = ":only-for-tests-read-only-host-clone-base",
    # Without os-release, nspawn cannot boot into this image.
    make_dirs = [("/", "etc")],
    mounts = [
        image.host_file_mount("/etc/os-release"),
        # We use `nobody` in tests, which is presumably defined on the host.
        image.host_file_mount("/etc/passwd"),
    ],
)

export_file(name = "deadbeef-machine-id")

image.layer(
    name = "only-for-tests-read-only-host-clone-with-machine-id",
    parent_layer = ":only-for-tests-read-only-host-clone-no-machine-id",
    install_data = {":deadbeef-machine-id": "/etc/machine-id"},
)

# The next 2 layers exercise the build appliance logic for RPM installation
# (and other items in the future?).  This powers two distinct test types:
#  - a uni tests `test_rpm_action_item_build_appliance` in `test-items`
#  - a full-layer integration test `test_build_appliance` in `test-image-layer`

image.layer(
    name = "fake-build-appliance-from-host",
    parent_layer = ":only-for-tests-read-only-host-clone",
    # These stub directories are needed to make `yum-from-snapshot`'s host
    # path protection feature happy.  The alternative is to make all of
    # these ONLY be protected if they exist, but that has safety downsides,
    # and involves more code.
    make_dirs = [
        ("/var", "tmp"),
        ("/var", "log"),
        ("/var", "cache/yum"),
        ("/var", "lib/rpm"),
        ("/var/lib", "yum"),
    ],
    install_executables = {
        "//fs_image/rpm:yum-from-test-snapshot": "/yum-from-snapshot",
    },
)

# Verified by `test_build_appliance` in `test-image-layer`.
image.layer(
    name = "validates-build-appliance",
    rpms = ["rpm-test-milk"],  # Compact syntax for RPM installation.
    build_appliance = ":fake-build-appliance-from-host",
)

# The next two targets exercise:
#  - all forms of constructing a make_dirs request
#  - specifying `stat` options, like user:group & mode

image.feature(
    name = "feature_dirs",
    make_dirs = [
        "/foo/bar",
        ("/foo/bar", "baz"),
    ],
)

# The permissions are bad, so any attempt to add this into a layer will fail.
image.feature(
    name = "feature_bad_dir",
    make_dirs = [
        {
            "into_dir": "/foo",
            "mode": "mmm",
            "path_to_make": "borf/beep",
            "user:group": "uuu:ggg",
        },
    ],
)

# Exercises:
#   - all forms of specifying symlinks
image.feature(
    name = "feature_symlinks",
    install_data = [
        (":hello_world.tar", "/foo/hello_world.tar"),
    ],
    symlinks_to_dirs = [
        ("/foo/bar", "/foo/fighter"),
        {
            "dest": "/foo/face",
            "source": "/foo/bar",
        },
        ("/foo/bar", "/foo/bar/baz/"),  # Rsync style
    ],
    symlinks_to_files = [
        ("/foo/hello_world.tar", "/foo/symlink_to_hello_world.tar"),
        # /dev/null is whitelisted to be a dangling symlink
        ("/dev/null", "/foo/symlink_to_dev_null"),
    ],
)

# Exercises:
#  - all forms of specifying a tarball to extract
#  - installing and removing RPMs
# NB: Unlike `feature_install_files`, this **implicitly** depends on some
# feature to provide directories `/foo/borf/`.
image.feature(
    name = "feature_tar_and_rpms",
    rpms = {
        "rpm-test-carrot": "remove_if_exists",  # Installed by `parent_layer`
        "rpm-test-mice": "install",
        # No-op in `child_layer` -- it was never installed
        "rpm-test-milk": "remove_if_exists",
    },
    tarballs = [
        {
            "hash": hello_tar_hash,
            "into_dir": "foo/borf",
            "tarball": ":hello_world.tar",
        },
        {
            "hash": hello_tar_hash,
            "into_dir": "foo",
            "tarball": ":hello_world.tar",
        },
    ],
)

image.feature(
    name = "feature_mount",
    mounts = {
        "/host_etc": image.host_dir_mount("/etc"),
        "/meownt": ":hello_world_base",
    },
)

python_binary(
    name = "print-ok",
    srcs = ["print_ok.py"],
    base_module = "fs_image",
    main_module = "fs_image.print_ok",
)

buck_genrule(
    name = "dir-print-ok",
    out = "dir",
    bash = '''
    mkdir -p "$OUT/subdir"
    cp $(location {maybe_wrapped_ok}) "$OUT"/subdir/print-ok
    echo meow > "$OUT"/kitteh
    '''.format(
        # A @mode/dev PAR will break if we copy it into another directory,
        # since it relies on the linktree being its sibling.  Using this
        # wrapper prevents that.
        maybe_wrapped_ok = maybe_wrap_runtime_deps_as_build_time_deps(
            name = "wrap-print-ok",
            target = ":print-ok",
            visibility = None,
        )[1],
    ),
    cacheable = False,  # The wrapper makes our output non-cacheable.
    # This is required to be able to execute anything out of the directory.
    executable = True,
)

# Exercises `install_{data,executables}, taking care to cover all reasonable
# combinations of :
#   - Rsync convention
#   - Data vs executables
#   - Installing a file from a target that outputs a directory
#
# Be sure to add any new installed executables to `test-execute-installed`.
#
# NB: Unlike `feature_tar_and_rpms`, this **explicitly** depends on
# `feature_dirs` to provide directories `/foo/bar/`.  This exercises the
# case where the same feature is pulled in via several dependency paths.
image.feature(
    name = "feature_install_files",
    features = [":feature_dirs"],  # We use /foo/bar for a couple of installs.
    make_dirs = [("/foo/bar/", "installed")],  # Most things will go here.
    install_data = [
        (":hello_world.tar", "/foo/bar/hello_world.tar"),
        {
            "dest": "/foo/bar/hello_world_again.tar",
            "source": ":hello_world.tar",
            "user:group": "nobody:nobody",
        },
        {
            "dest": "/foo/bar/installed/yittal-kitteh",
            "path_in_source": "kitteh",
            "source": ":dir-print-ok",
        },
    ],
    install_executables = [
        (":print-ok", "/foo/bar/installed/print-ok"),
        {
            "dest": "/foo/bar/installed/print-ok-too",
            "path_in_source": "subdir/print-ok",
            "source": ":dir-print-ok",
        },
    ],
)

image.layer(
    name = "installed-executables",
    parent_layer = ":only-for-tests-read-only-host-clone",
    features = [":feature_install_files"],
)

# Omnibus feature for test-compiler and test-image-feature.  It currently
# cannot be materialized as an `image.layer` because of `feature_bad_dir`.
#
# Exercises:
#  - all forms of specifying target outputs to copy
#  - copying other targets' outputs into the image, including stat options
#  - making directories & symlinks
#  - extracting tarballs
#  - composition of subsidiary features
#  - removing paths (NB: much of this logic is at build-time, so this is an
#    incomplete test, see also `test-items` and `test-add-remove-conflict`)
#    something installed by an RPM, add T_REMOVE_PATHS to sample_items, etc
image.feature(
    name = "feature_kitchen_sink",
    remove_paths = [
        "/path/to/remove",
        ("/path/to/remove", "if_exists"),
        {
            "action": "assert_exists",
            "path": "/another/path/to/remove",
        },
    ],
    features = [
        ":feature_bad_dir",
        ":feature_dirs",
        ":feature_install_files",
        ":feature_mount",
        ":feature_tar_and_rpms",
        ":feature_symlinks",
    ],
)

##
## The next few targets test the interaction of adding regular,
## dependency-sorted items with `remove_paths`.  This
## `test-add-remove-conflict` shows that:
##     - Removing from a parent layer is OK (`child` layer).
##     - Removing something added in the same layer is not (`both` feature).
##

image.feature(
    name = "feature_addremove_conflict_add",
    make_dirs = [("/", "a/b")],
)

image.feature(
    name = "feature_addremove_conflict_remove",
    remove_paths = ["/a"],
)

image.feature(
    name = "feature_remove_nonexistent",
    remove_paths = [("/does/not/exist", "if_exists")],
)

# This feature is added to both layers, which validates that `image.layer`
# can handle an idempotent feature being installed twice.  The layers do not
# directly repeat `feature_remove_nonexistent` because that would not
# reproduce a now-fixed bug with repeated features.
image.feature(
    name = "feature_repeated_removal",
    features = [":feature_remove_nonexistent"],
)

# `test-add-remove-conflict` compiles this feature to produce a failure
image.feature(
    name = "feature_addremove_conflict_both",
    features = [
        ":feature_addremove_conflict_add",
        ":feature_addremove_conflict_remove",
    ],
)

image.layer(
    name = "addremove_conflict_parent",
    features = [
        ":feature_addremove_conflict_add",
        ":feature_repeated_removal",
    ],
)

image.layer(
    name = "addremove_conflict_child",
    parent_layer = ":addremove_conflict_parent",
    features = [
        ":feature_addremove_conflict_remove",
        ":feature_repeated_removal",
    ],
)

##
## The following layers are the basis of an integration test for
## `image.layer`.  Unlike the `image.feature`s above, they must be actually
## be buildable, not just amenable to dependency analysis -- for this
## reason, we cannot e.g. depend on the broken `:feature_bad_dir` target.
##

image.layer(
    name = "hello_world_base",
    tarballs = [
        {
            "generator": ":hello_world_tar_generator.sh",
            # Most generators would not have this API wart of externally
            # specifying the output filename.  This mis-feature only exists
            # to exercise `generator_args`.
            "generator_args": ["hello_world.tar"],
            "hash": hello_tar_hash,
            "into_dir": "//",  # Double-slash tests path normalization
        },
    ],
    # This tells our hypothetical runtime that in order to mount this layer,
    # it must invoke the "chicken" mount source (which might just download
    # and unpack a serialized versions of this layer).
    mount_config = {"runtime_source": {"type": "chicken"}},
)

image.layer(
    name = "parent_layer",
    install_data = [
        # This directory comes from `rpm-test-carrot`. This tests that our
        # dependency engine sees RPM contents as a "provides".
        (":hello_world.tar", "/usr/share/rpm_test/hello_world.tar"),
        {
            "dest": "/foo/bar/even_more_hello_world.tar",
            "source": ":hello_world.tar",
        },
    ],
    features = [
        ":feature_dirs",
        ":feature_symlinks",
    ],
    mounts = {
        # NB: `host_dir_mount` is exercised above.
        "/dev_null": image.host_file_mount(source = "/dev/null"),
        "/mounted_hello": ":hello_world_base",
    },
    parent_layer = ":hello_world_base",
    rpms = ["rpm-test-carrot"],  # Compact syntax for RPM installation.
    yum_from_repo_snapshot = "//fs_image/rpm:yum-from-test-snapshot",
)

image.layer(
    name = "child_layer",
    features = [":feature_tar_and_rpms"],
    make_dirs = [
        ("/foo", "borf"),  # for :feature_tar
        ("/foo", "extracted_hello"),
        {
            "into_dir": "/foo",
            "mode": 0o711,
            "path_to_make": "more_extracted_hello",
            "user:group": "nobody:nobody",
        },
    ],
    parent_layer = ":parent_layer",
    tarballs = [
        {
            "hash": hello_tar_hash,
            "into_dir": "/foo/extracted_hello",
            "tarball": ":hello_world.tar",
        },
        {
            "hash": hello_tar_hash,
            "into_dir": "/foo/more_extracted_hello",
            "tarball": ":hello_world.tar",
        },
    ],
    yum_from_repo_snapshot = "//fs_image/rpm:yum-from-test-snapshot",
)

image.package(name = "child_layer.sendstream")

image.package(name = "child_layer.btrfs")

##
## These few rules help test the `image.layer` `from_sendstream` feature.
##

python_binary(
    name = "save-demo-sendstream",
    srcs = ["save_demo_sendstream.py"],
    base_module = "",
    main_module = "save_demo_sendstream",
    par_style = "zip",  # testlib_demo_sendstreams needs this in @mode/opt
    deps = ["//fs_image/btrfs_diff:testlib_demo_sendstreams"],
)

# Future: it'd be neat to add `mutate_ops`, but that requires some wrangling
# with btrfs to get it to find the parent subvolume.
op = "create_ops"

buck_genrule(
    name = op + "-original.sendstream",
    out = op + "-original.sendstream",
    bash = "$(exe :save-demo-sendstream) \"$OUT\" " + op,
)

image.layer(
    name = op,
    from_sendstream = ":" + op + "-original.sendstream",
)

image.package(name = op + ".sendstream")

image.layer("empty")  # Just ensure this builds, not checking contents :)
