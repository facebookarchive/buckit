##
## image_feature: The goal of this section is to get good coverage for all
## the syntax variants supported by the `image_feature` converter.  The unit
## test will then check that they become the right image compiler Items.
##

load("//fs_image/buck:image.bzl", "image")

buck_genrule(
    name = "hello_world.tar",
    out = "hello_world.tar",
    bash = """d=`mktemp -d`; trap 'rm -rf "$d"' EXIT; """ +
           "touch \"$d\"/hello_world; " +
           "tar --owner=root --group=root -C \"$d\" -cf \"$OUT\" .",
)

# The next two targets exercise:
#  - all forms of constructing a make_dirs request
#  - specifying `stat` options, like user/group/mode

image.feature(
    name = "feature_dirs",
    make_dirs = [
        "/foo/bar",
        ("/foo/bar", "baz"),
    ],
)

# The permissions are bad, so any attempt to add this into a layer will fail.
image.feature(
    name = "feature_bad_dir",
    make_dirs = [
        {
            "group": "ggg",
            "into_dir": "/foo",
            "mode": "mmm",
            "path_to_make": "borf/beep",
            "user": "uuu",
        },
    ],
)

# Exercises:
#  - all forms of specifying a tarball to extract
#  - installing and removing RPMs
image.feature(
    name = "feature_tar_and_rpms",
    rpms = {
        "rpm-test-carrot": "remove_if_exists",  # Installed by `parent_layer`
        "rpm-test-mice": "install",
        # No-op in `child_layer` -- it was never installed
        "rpm-test-milk": "remove_if_exists",
    },
    tarballs = [
        (":hello_world.tar", "foo/borf"),
        {
            "into_dir": "foo",
            "tarball": ":hello_world.tar",
        },
    ],
)

# Exercises:
#  - all forms of specifying files to copy, including the rsync trailing-slash
#  - dependent features
#  - `copy_deps` also supports stat options
image.feature(
    name = "feature_copy_dirs_tar_and_rpms",
    copy_deps = [
        (":hello_world.tar", "/foo/bar/"),
        {
            "dest": "/foo/bar/hello_world_again.tar",
            "group": "nobody",
            "source": ":hello_world.tar",
        },
    ],
    features = [
        ":feature_bad_dir",
        ":feature_dirs",
        ":feature_tar_and_rpms",
    ],
)

##
## The following layers are the basis of an integration test for
## `image.layer`.  Unlike the `image.feature`s above, they must be actually
## be buildable, not just amenable to dependency analysis -- for this
## reason, we cannot e.g. depend on the broken `:feature_bad_dir` target.
##

image.layer(
    name = "hello_world_base",
    tarballs = [(":hello_world.tar", "//")],
)

image.layer(
    name = "parent_layer",
    copy_deps = [
        # This directory comes from `rpm-test-carrot`. This tests that our
        # dependency engine sees RPM contents as a "provides".
        (":hello_world.tar", "/usr/share/rpm_test/"),
        {
            "dest": "/foo/bar/even_more_hello_world.tar",
            "source": ":hello_world.tar",
        },
    ],
    features = [":feature_dirs"],
    parent_layer = ":hello_world_base",
    rpms = ["rpm-test-carrot"],  # Compact syntax for RPM installation.
    yum_from_repo_snapshot = "//fs_image/rpm:yum-from-test-snapshot",
)

image.layer(
    name = "child_layer",
    features = [":feature_tar_and_rpms"],
    make_dirs = [
        ("/foo", "borf"),  # for :feature_tar
        ("/foo", "extracted_hello"),
        {
            "group": "nobody",
            "into_dir": "/foo",
            "mode": 0o711,
            "path_to_make": "more_extracted_hello",
            "user": "nobody",
        },
    ],
    parent_layer = ":parent_layer",
    tarballs = [
        (":hello_world.tar", "/foo/extracted_hello"),
        {
            "into_dir": "/foo/more_extracted_hello",
            "tarball": ":hello_world.tar",
        },
    ],
    yum_from_repo_snapshot = "//fs_image/rpm:yum-from-test-snapshot",
)

image.package(name = "child_layer.sendstream")

image.package(name = "child_layer.btrfs")

##
## These few rules help test the `image.layer` `from_sendstream` feature.
##

python_binary(
    name = "save-demo-sendstream",
    srcs = ["save_demo_sendstream.py"],
    base_module = "",
    main_module = "save_demo_sendstream",
    par_style = "zip",  # testlib_demo_sendstreams needs this in @mode/opt
    deps = ["//fs_image/btrfs_diff:testlib_demo_sendstreams"],
)

# Future: it'd be neat to add `mutate_ops`, but that requires some wrangling
# with btrfs to get it to find the parent subvolume.
op = "create_ops"

buck_genrule(
    name = op + "-original.sendstream",
    out = op + "-original.sendstream",
    bash = "$(exe :save-demo-sendstream) \"$OUT\" " + op,
)

image.layer(
    name = op,
    from_sendstream = ":" + op + "-original.sendstream",
)

image.package(name = op + ".sendstream")

image.layer("empty")  # Just ensure this builds, not checking contents :)
