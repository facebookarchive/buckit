load(":defs.bzl", "fake_macro_library")

# IMPORTANT: If you add new `.bzl` files or dependencies in `fs_image/`,
# make sure their dependency structure is reflected below.  Just run `grep
# 'load(":'` from `fs_image/`, and visually compare with the below.  Future:
# this could easily be automated in the style of Bistro's
# `targets_to_cmake_lists.py`.

# The following rules are "fake" in the sense that their build artifacts are
# actually discarded.  However, they are required to trigger automatic
# builds and tests on changes to .bzl files, so it is important to keep
# these up-to-date.  Furthermore, when you add a new rule type, you'll need
# to make its targets depend on the corresponding `fake_macro_library`.
# This should eventually become unnecessary, follow Q10141.

fake_macro_library(
    name = "artifacts_require_repo",
    srcs = ["artifacts_require_repo.bzl"],
)

fake_macro_library(
    name = "crc32",
    srcs = ["crc32.bzl"],
)

fake_macro_library(
    name = "image_source",
    srcs = ["image_source.bzl"],
)

fake_macro_library(
    name = "image_utils",
    srcs = ["image_utils.bzl"],
)

fake_macro_library(
    name = "target_tagger",
    srcs = ["target_tagger.bzl"],
    deps = [":image_source"],
)

fake_macro_library(
    name = "wrap_runtime_deps",
    srcs = ["wrap_runtime_deps.bzl"],
)

fake_macro_library(
    name = "image_layer",
    srcs = [
        "compile_image_features.bzl",
        "image_layer.bzl",
    ],
    deps = [
        ":artifacts_require_repo",
        ":image_utils",
        ":target_tagger",
    ],
)

fake_macro_library(
    name = "image_feature",
    srcs = ["image_feature.bzl"],
    deps = [
        ":crc32",
        ":target_tagger",
        ":wrap_runtime_deps",
    ],
)

fake_macro_library(
    name = "image_package",
    srcs = ["image_package.bzl"],
    deps = [":image_utils"],
)

fake_macro_library(
    name = "image_unittest_helpers",
    srcs = ["image_unittest_helpers.bzl"],
    deps = [
        ":image_layer",
    ],
)

fake_macro_library(
    name = "image_python_unittest",
    srcs = ["image_python_unittest.bzl"],
    deps = [":image_unittest_helpers"],
)

fake_macro_library(
    name = "image_cpp_unittest",
    srcs = ["image_cpp_unittest.bzl"],
    deps = [":image_unittest_helpers"],
)
