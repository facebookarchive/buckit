BASE_DIR = "//tools/build/buck/infra_macros/macro_lib/convert/container_image"

python_library(
    name = "testlib_temp_subvolumes",
    srcs = [
        "tests/temp_subvolumes.py",
    ],
    base_module = "",
    deps = [
        ":subvol_utils",
        BASE_DIR + ":artifacts_dir",
        BASE_DIR + ":volume_for_repo",
    ],
)

python_library(
    name = "subvol_utils",
    srcs = ["subvol_utils.py"],
    base_module = "",
)

python_unittest(
    name = "test-subvol-utils",
    srcs = ["tests/test_subvol_utils.py"],
    base_module = "",
    needed_coverage = [(
        100,
        ":subvol_utils",
    )],
    par_style = "zip",  # "fastzip" won't work because of `set_up_volume.sh`
    deps = [
        ":subvol_utils",
        ":testlib_temp_subvolumes",
    ],
)

# For `test_volume_for_repo.py`. At build time, we find use `dirname(__file__)`
export_file(name = "set_up_volume.sh")

# A separate library because otherwise `pyunitcoveragerunner.py` will demand
# coverage on the `.sh` file.
python_library(
    name = "set_up_volume.sh-proxy",
    base_module = "",
    # `get_volume_for_current_repo()` needs this to be our sibling in the PAR.
    gen_srcs = {":set_up_volume.sh": "set_up_volume.sh"},
)

python_library(
    name = "volume_for_repo",
    srcs = ["volume_for_repo.py"],
    base_module = "",
    deps = [":set_up_volume.sh-proxy"],
)

python_unittest(
    name = "test-volume-for-repo",
    srcs = ["tests/test_volume_for_repo.py"],
    base_module = "",
    needed_coverage = [(
        100,
        ":volume_for_repo",
    )],
    par_style = "zip",  # "fastzip" won't work because of `set_up_volume.sh`
    deps = [":volume_for_repo"],
)

python_library(
    name = "artifacts_dir",
    srcs = ["artifacts_dir.py"],
    base_module = "",
)

python_library(
    name = "subvolume_garbage_collector",
    srcs = ["subvolume_garbage_collector.py"],
    base_module = "",
)

export_file(
    name = "fake_sudo.sh",
    src = "tests/fake_sudo.sh",
)

python_library(
    # Separate so we can put `sudo` alone in its own directory
    name = "fake_sudo",
    base_module = "fake_sudo",
    gen_srcs = {":fake_sudo.sh": "sudo"},
)

python_unittest(
    name = "test-subvolume-garbage-collector",
    srcs = ["tests/test_subvolume_garbage_collector.py"],
    base_module = "",
    needed_coverage = [(
        100,
        ":subvolume_garbage_collector",
    )],
    par_style = "zip",  # "fastzip" won't work because of `fake_sudo.sh`
    deps = [
        ":fake_sudo",
        ":subvolume_garbage_collector",
    ],
)

# No unit-test since this is simple, its output is random, and we are
# unlikely to need to change it.  Be sure to test your changes manually!
python_library(
    name = "subvolume_version",
    srcs = ["subvolume_version.py"],
    base_module = "",
)

# These binaries are used by `image_layer.py` as build-time helpers.

python_binary(
    name = "artifacts-dir",
    main_module = "artifacts_dir",
    deps = [":artifacts_dir"],
)

python_binary(
    name = "compiler",
    main_module = "compiler.compiler",
    deps = [BASE_DIR + "/compiler:compiler"],
)

python_binary(
    name = "subvolume-garbage-collector",
    main_module = "subvolume_garbage_collector",
    deps = [":subvolume_garbage_collector"],
)

python_binary(
    name = "subvolume-version",
    main_module = "subvolume_version",
    deps = [":subvolume_version"],
)

python_binary(
    name = "volume-for-repo",
    main_module = "volume_for_repo",
    par_style = "zip",  # "fastzip" breaks @mode/opt for `set_up_volume.sh`
    deps = [":volume_for_repo"],
)

python_binary(
    name = "package-image",
    srcs = ["package_image.py"],
    base_module = "",
    main_module = "package_image",
    deps = [
        ":subvol_utils",
        BASE_DIR + "/compiler:subvolume_on_disk",
    ],
)

TEST_TARGET_PREFIX = BASE_DIR + "/compiler/tests:"

# Also tests the Buck macro `image_package.py`, but we cannot assert coverage.
python_unittest(
    name = "test-package-image",
    srcs = ["tests/test_package_image.py"],
    base_module = "compiler",
    needed_coverage = [(100, ":package-image-library")],
    par_style = "xar",  # Ensures we can read resources in @mode/opt
    resources = {
        # Same comment re: mutate_ops as in `test_layer_from_demo_sendstreams`.
        TEST_TARGET_PREFIX + "create_ops-original.sendstream": "tests/create_ops-original.sendstream",
        TEST_TARGET_PREFIX + "create_ops.sendstream": "tests/create_ops.sendstream",
        TEST_TARGET_PREFIX + "create_ops": "tests/create_ops.json",
    },
    deps = [
        ":artifacts_dir",
        ":package-image-library",
        ":volume_for_repo",
        BASE_DIR + "/btrfs_diff:testlib_render_subvols",
    ],
)
